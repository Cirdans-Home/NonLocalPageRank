function [score,added,X] = testingheuristic(G,ind_deleted_edges,alpha,c,sigma)
%TESTINGHEURISTIC the present function test the heuristics for the
%linkprediction problem based on the PageRank algorithm. Both the nonlocal
%version, and the classical version can be tested here.
% INPUT
% G = the graph (digraph), 
% ind_deleted_edges = indices of edges to be removed edges, 
% c = the teleport constant for PR
% sigma = percentage of edges to predict
% OUTPUT
% score = the number of added edges tha coincides with the one in the
% removed list
% added = the added edges
% X = the similarity measure generated by the algorithm
%
% Code by:
% S. Cipolla - UniversitÃ  di Padova, Dipartimento di Matematica
% F. Durastante - Consiglio Nazionale delle Ricerche, Istituto per le
% Applicazioni del Calcolo "M. Picone"
% F. Tudisco - Gran Sasso Science Institute

n = numnodes(G);
e = ones(n,1);

H = G.rmedge(ind_deleted_edges);
A = H.adjacency();

if ~isinf(alpha) && alpha > 0 
    % Nonlocal pagerank
    W = H.distances();
    W = 1./(W.^alpha);
    W(W == inf) = 0;
    D = (1./(W*e));
    D(D == inf) = 0;
    D = spdiags(D,0,n,n);
    P = D*W;
elseif isinf(alpha)
    % Standard pagerank
    D = 1./(A*e);
    D(D == inf) = 0;
    D = spdiags(D,0,n,n);
    P = D*A;
else
    error('alpha has to be 0 < \alpha <= \inf');
end
% Add in P rows of (1/n,...,1/n) on the empty rows so that P1 = 1
P(diag(D) == 0,:) = ones(sum(diag(D)==0),n)./n;
% Compute the similarity matrix by doing (1-c) (I - c*P)^{-1}
I = eye(n,n);
X = (1-c)*( (I-c*P.')\I );
% We do not want to add loops in the graph, so to hell with the diagonal
% and with all the repeated elements above the main diagonal, since
% everything is symmetric
X = X + X';
%end
X(I>0) = -Inf;
X(A>0) = -Inf;

% Take the k biggest elements in X(i,j) as candidate edges 
k = floor(sigma*length(ind_deleted_edges));
[~,J] = maxk(X(:),k);
[i,j] = ind2sub([n n],J);
added = [i,j];

% We compute the score by cheking what fractione of the candidate added
% edges matches we the one we have removed
score = ismember(added,G.Edges.EndNodes(ind_deleted_edges,:),'rows'); 
score = sum(score); 

end

